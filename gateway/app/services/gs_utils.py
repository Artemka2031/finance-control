# gateway/app/services/gs_utils.py
"""
üí° –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ–π: –ø–æ–¥–≥—Ä—É–∑–∫–∞ .env, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, —á—Ç–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º,
   –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä‚Äë—Ç–∞–π–º–µ—Ä –∏ retry c —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π.
"""
from __future__ import annotations

import os
import time
import functools
import logging
import asyncio
import random
from typing import Callable, Any, Tuple, List

from dotenv import load_dotenv
import pygsheets
from googleapiclient.errors import HttpError

# –ø–æ–¥–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

log = logging.getLogger(__name__)


def timeit(tag: str | None = None) -> Callable[[Callable[..., Any]], Callable[..., Any]]:
    """@timeit("msg") ‚Üí –ø–µ—á–∞—Ç–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–∑–æ–≤–∞"""

    def deco(func: Callable[..., Any]) -> Callable[..., Any]:
        label = tag or func.__name__

        @functools.wraps(func)
        def wrap(*a, **kw):
            t0 = time.perf_counter()
            try:
                return func(*a, **kw)
            finally:
                log.info("‚è± %s  %.3f s", label, time.perf_counter() - t0)

        return wrap

    return deco


async def retry_gs(coro: Callable[[], Any], *, retries: int = 5) -> Any:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ Google API —Å back‚Äëoff –ø—Ä–∏ 429/5xx.
    `coro` ‚Äì async‚Äë–∏–ª–∏ sync‚Äë—Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
    """
    for i in range(retries):
        try:
            if asyncio.iscoroutinefunction(coro):
                return await coro()
            return coro()
        except HttpError as e:
            if e.resp.status not in (429, 500, 503):
                raise
            delay = 2 ** i + random.random()
            log.warning("Google API %s ‚Üí retry in %.1fs", e.resp.status, delay)
            await asyncio.sleep(delay)
    raise RuntimeError("Google API: too many retries")


@timeit("open_worksheet")
def open_worksheet() -> Tuple[pygsheets.Worksheet, List[List[str]]]:
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ª–∏—Å—Ç ¬´–û–±—â–∞—è —Ç–∞–±–ª–∏—Ü–∞¬ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ws, all_rows).
    """
    creds = os.getenv("SHEETS_SERVICE_FILE", "creds.json")
    url = os.getenv("SPREADSHEET_URL")
    if not url:
        raise EnvironmentError("SPREADSHEET_URL not set")

    gc = pygsheets.authorize(service_file=creds)
    sh = gc.open_by_url(url)
    ws = sh.worksheet_by_title("–û–±—â–∞—è —Ç–∞–±–ª–∏—Ü–∞")
    rows: List[List[str]] = ws.get_all_values(include_tailing_empty=False)
    return ws, rows
