from aiogram import Router, Bot, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, Voice
from .states import MessageState
from .agent_processor import process_agent_request, handle_agent_result
from ...agent.agent import Agent
from ...api_client import ApiClient
from ...utils.message_utils import track_messages, delete_tracked_messages
from ...utils.logging import configure_logger

logger = configure_logger("[MESSAGE_HANDLER]", "yellow")


def create_message_router(bot: Bot, api_client: ApiClient) -> Router:
    message_router = Router()
    agent = Agent()

    @message_router.message(MessageState.waiting_for_ai_input, F.text.contains("#–ò–ò"))
    @track_messages
    async def handle_ai_message(message: Message, state: FSMContext, bot: Bot) -> Message:
        user_id = message.from_user.id
        chat_id = message.chat.id
        input_text = message.text.replace("#–ò–ò", "").strip()

        if not input_text:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #–ò–ò")
            return await bot.send_message(
                chat_id=chat_id,
                text="ü§î –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ #–ò–ò, –Ω–∞–ø—Ä–∏–º–µ—Ä: #–ò–ò –ö—É–ø–∏–ª –∫–æ—Ñ–µ –∑–∞ 250",
                parse_mode="HTML"
            )

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å #–ò–ò: {input_text}")
        await delete_tracked_messages(bot, state, chat_id)
        await state.set_state(MessageState.waiting_for_clarification)

        processing_message = await bot.send_message(
            chat_id=chat_id,
            text="üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...",
            parse_mode="HTML"
        )

        result = await process_agent_request(agent, input_text, interactive=True)
        return await handle_agent_result(
            result, bot, state, chat_id, input_text, api_client,
            message_id=processing_message.message_id
        )

    @message_router.message(MessageState.waiting_for_ai_input, F.voice)
    @track_messages
    async def handle_voice_message(message: Voice, state: FSMContext, bot: Bot) -> Message:
        user_id = message.from_user.id
        chat_id = message.chat.id

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        await delete_tracked_messages(bot, state, chat_id)
        await state.set_state(MessageState.waiting_for_clarification)

        # –ò–º–∏—Ç–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —á–µ—Ä–µ–∑ Whisper
        fake_transcription = "–ö—É–ø–∏–ª –∫–æ—Ñ–µ –∑–∞ 250 —Ä—É–±–ª–µ–π"  # –ó–∞–≥–ª—É—à–∫–∞
        logger.debug(f"–ò–º–∏—Ç–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {fake_transcription}")

        transcription_message = await bot.send_message(
            chat_id=chat_id,
            text=f"üéôÔ∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {fake_transcription}",
            parse_mode="HTML"
        )
        await asyncio.sleep(1.0)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏

        processing_message = await bot.send_message(
            chat_id=chat_id,
            text="üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å...",
            parse_mode="HTML"
        )

        result = await process_agent_request(agent, fake_transcription, interactive=True)
        return await handle_agent_result(
            result, bot, state, chat_id, fake_transcription, api_client,
            message_id=processing_message.message_id
        )

    @message_router.message(MessageState.waiting_for_clarification, F.text)
    @track_messages
    async def handle_clarification_message(message: Message, state: FSMContext, bot: Bot) -> Message:
        user_id = message.from_user.id
        chat_id = message.chat.id
        input_text = message.text.strip()
        data = await state.get_data()
        agent_state = data.get("agent_state")
        input_text_orig = data.get("input_text", "")

        if not agent_state or not agent_state.get("actions"):
            logger.debug(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await state.set_state(MessageState.waiting_for_ai_input)
            return await bot.send_message(
                chat_id=chat_id,
                text="ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —Å #–ò–ò",
                parse_mode="HTML"
            )

        clarification_needed = False
        clarification_field = None
        request_index = None
        for action in agent_state["actions"]:
            if action["needs_clarification"]:
                clarification_field = action["clarification_field"]
                request_index = action["request_index"]
                clarification_needed = True
                break

        if not clarification_needed or not clarification_field:
            logger.debug(f"–ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return await bot.send_message(
                chat_id=chat_id,
                text="ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å #–ò–ò",
                parse_mode="HTML"
            )

        if clarification_field not in ["amount", "date", "coefficient", "comment"]:
            logger.debug(f"–û–∂–∏–¥–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—è {clarification_field}")
            return await bot.send_message(
                chat_id=chat_id,
                text=f"üìã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ {clarification_field} —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É",
                parse_mode="HTML"
            )

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Ç–æ—á–Ω–∏–ª {clarification_field}: {input_text}")
        agent_state["requests"][request_index]["entities"][clarification_field] = input_text
        if clarification_field in agent_state["requests"][request_index]["missing"]:
            agent_state["requests"][request_index]["missing"].remove(clarification_field)
        agent_state["messages"].append({"role": "user", "content": f"Clarified: {clarification_field}={input_text}"})

        processing_message = await bot.send_message(
            chat_id=chat_id,
            text="üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ...",
            parse_mode="HTML"
        )

        result = await process_agent_request(agent, input_text_orig, interactive=True, prev_state=agent_state)
        return await handle_agent_result(
            result, bot, state, chat_id, input_text_orig, api_client,
            message_id=processing_message.message_id
        )

    return message_router
