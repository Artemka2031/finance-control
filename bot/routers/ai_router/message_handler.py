"""
Message-handler –≤–µ—Ç–∫–∏ #–ò–ò.

–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
* –Ω–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–æ–≥–∏–∫–µ, —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏,
  –∏—Å–ø–æ–ª—å–∑—É—é—â–µ–π –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ bot.edit_message_text.
"""

import asyncio

from aiogram import Router, Bot, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, Voice

from .states import MessageState
from .agent_processor import process_agent_request, handle_agent_result
from ...agent.agent import Agent
from ...api_client import ApiClient
from ...utils.message_utils import (
    track_messages,
    delete_tracked_messages,
    animate_processing,
)
from ...utils.logging import configure_logger

logger = configure_logger("[MESSAGE_HANDLER]", "yellow")


def create_message_router(bot: Bot, api_client: ApiClient) -> Router:
    router = Router()
    agent = Agent()

    # ------------------------------------------------------------------ #
    # 1. –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å #–ò–ò                                          #
    # ------------------------------------------------------------------ #
    @router.message(MessageState.waiting_for_ai_input, F.text.contains("#–ò–ò"))
    @track_messages
    async def handle_ai_message(msg: Message, state: FSMContext, bot: Bot) -> Message:
        chat_id = msg.chat.id
        input_text = msg.text.replace("#–ò–ò", "").strip()

        if not input_text:
            return await bot.send_message(chat_id, "ü§î –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ #–ò–ò")

        await delete_tracked_messages(bot, state, chat_id)
        await state.set_state(MessageState.waiting_for_clarification)

        status = await bot.send_message(
            chat_id,
            f"üîç –ó–∞–ø—Ä–æ—Å:\n{input_text}\n\n‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é‚Ä¶",
            parse_mode="HTML",
        )
        anim = asyncio.create_task(
            animate_processing(bot, chat_id, status.message_id, f"–ó–∞–ø—Ä–æ—Å:\n{input_text}")
        )

        try:
            result = await process_agent_request(agent, input_text, interactive=True)
        finally:
            anim.cancel()

        return await handle_agent_result(
            result, bot, state, chat_id, input_text, api_client, message_id=status.message_id
        )

    # ------------------------------------------------------------------ #
    # 2. –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ                                             #
    # ------------------------------------------------------------------ #
    @router.message(MessageState.waiting_for_ai_input, F.voice)
    @track_messages
    async def handle_voice(msg: Voice, state: FSMContext, bot: Bot) -> Message:
        chat_id = msg.chat.id
        await delete_tracked_messages(bot, state, chat_id)
        await state.set_state(MessageState.waiting_for_clarification)

        text = "–ö—É–ø–∏–ª –∫–æ—Ñ–µ –∑–∞ 250 —Ä—É–±–ª–µ–π"  # –∑–∞–≥–ª—É—à–∫–∞
        await bot.send_message(chat_id, f"üéôÔ∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}", parse_mode="HTML")

        status = await bot.send_message(chat_id, "üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å‚Ä¶", parse_mode="HTML")
        anim = asyncio.create_task(animate_processing(bot, chat_id, status.message_id, "–ì–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å"))

        try:
            result = await process_agent_request(agent, text, interactive=True)
        finally:
            anim.cancel()

        return await handle_agent_result(
            result, bot, state, chat_id, text, api_client, message_id=status.message_id
        )

    # ------------------------------------------------------------------ #
    # 3. –£—Ç–æ—á–Ω–µ–Ω–∏—è                                                       #
    # ------------------------------------------------------------------ #
    @router.message(MessageState.waiting_for_clarification, F.text)
    @track_messages
    async def handle_clarification(msg: Message, state: FSMContext, bot: Bot) -> Message:
        chat_id = msg.chat.id
        user_id = msg.from_user.id
        clarification = msg.text.strip()

        data = await state.get_data()
        agent_state = data.get("agent_state")
        original_input = data.get("input_text", "")

        if not agent_state or not agent_state.get("actions"):
            await state.set_state(MessageState.waiting_for_ai_input)
            return await bot.send_message(chat_id, "ü§î –ù–∞—á–Ω–∏—Ç–µ —Å #–ò–ò")

        pending = next((a for a in agent_state["actions"] if a["needs_clarification"]), None)
        if not pending or pending["clarification_field"] not in ["amount", "date", "coefficient", "comment"]:
            return await bot.send_message(chat_id, "ü§î –£—Ç–æ—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É")

        field = pending["clarification_field"]
        req_idx = pending["request_index"]
        logger.info(f"{user_id=} —É—Ç–æ—á–Ω–∏–ª {field}: {clarification}")

        agent_state["requests"][req_idx]["entities"][field] = clarification
        agent_state["requests"][req_idx]["missing"] = [
            m for m in agent_state["requests"][req_idx]["missing"] if m != field
        ]
        agent_state["messages"].append({"role": "user", "content": f"Clarified: {field}={clarification}"})

        status = await bot.send_message(chat_id, "üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ‚Ä¶", parse_mode="HTML")
        anim = asyncio.create_task(animate_processing(bot, chat_id, status.message_id, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ"))

        try:
            result = await process_agent_request(agent, original_input, interactive=True, prev_state=agent_state)
        finally:
            anim.cancel()

        return await handle_agent_result(
            result, bot, state, chat_id, original_input, api_client, message_id=status.message_id
        )

    # ------------------------------------------------------------------ #
    return router
