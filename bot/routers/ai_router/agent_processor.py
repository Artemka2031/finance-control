import asyncio
import random
from typing import Optional, Dict
from datetime import datetime
from aiogram import Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, Chat

from ...agent.agent import Agent
from ...agent.agents.serialization import serialize_messages, create_aiogram_keyboard
from ...api_client import ApiClient
from ...utils.logging import configure_logger
from ...utils.message_utils import format_operation_message

logger = configure_logger("[AGENT_PROCESSOR]", "cyan")


async def process_agent_request(agent: Agent, input_text: str, interactive: bool = True,
                                prev_state: Dict = None, selection: str = None, bot: Bot = None,
                                chat_id: int = None, message_id: int = None) -> Dict:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∞–≥–µ–Ω—Ç–∞."""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    agent.bot = bot
    agent.chat_id = chat_id
    agent.message_id = message_id
    result = await agent.process_request(
        input_text,
        interactive=interactive,
        prev_state=prev_state,
        selection=selection
    )
    return result


async def animate_agent_processing(bot: Bot, chat_id: int, message_id: int, intent: str = None) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≥–µ–Ω—Ç–∞."""
    general_stages = [
        "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å...",
        "üß† –†–∞–∑–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª–∏...",
        "üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...",
        "üîé –ò–∑—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç...",
        "üí° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...",
        "üõ†Ô∏è –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç..."
    ]
    intent_map = {
        "add_income": [
            "üí∞ –†–∞—Å–ø–æ–∑–Ω–∞—ë–º –¥–æ—Ö–æ–¥...",
            "üí∏ –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ...",
            "üìà –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Ö–æ–¥..."
        ],
        "add_expense": [
            "üõí –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥...",
            "üí≥ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞—Ç—É...",
            "üõçÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É..."
        ],
        "borrow": [
            "ü§ù –û—Ñ–æ—Ä–º–ª—è–µ–º –¥–æ–ª–≥...",
            "üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞—ë–º...",
            "üí∂ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç..."
        ],
        "repay": [
            "‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ–ª–≥...",
            "üí∏ –ü–æ–≥–∞—à–∞–µ–º –∑–∞—ë–º...",
            "‚úîÔ∏è –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–æ–ª–≥..."
        ]
    }

    stages = intent_map.get(intent, []) + random.sample(general_stages, k=min(3, len(general_stages)))
    random.shuffle(stages)

    for stage in stages[:4]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 4 —ç—Ç–∞–ø–æ–≤ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        try:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=stage,
                parse_mode="HTML"
            )
            await asyncio.sleep(0.8)  # –£—Å–∫–æ—Ä–∏–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—é
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–≥–µ–Ω—Ç–∞: {e}")
            break


async def handle_agent_result(result: dict, bot: Bot, state: FSMContext, chat_id: int,
                              input_text: str, api_client: ApiClient, message_id: Optional[int] = None) -> Message:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≥–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç."""
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    messages = result.get("messages", [])
    output = result.get("output", [])

    serialized_messages = await serialize_messages(
        messages,
        api_client,
        result.get("state", {}).get("metadata", {}),
        output
    )
    logger.debug(f"–°–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ {len(serialized_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")

    if not serialized_messages:
        logger.error(f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        return await bot.send_message(
            chat_id=chat_id,
            text="üòì –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!",
            parse_mode="HTML"
        )

    sent_message = None
    for message in serialized_messages:
        text = message.get("text", "")
        keyboard_data = message.get("keyboard")
        keyboard = await create_aiogram_keyboard(keyboard_data) if keyboard_data else None
        request_indices = message.get("request_indices", [])

        if not text:
            logger.error(f"–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id}, request_indices: {request_indices}")
            text = "üòì –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"

        if result.get("state"):
            update_data = {
                "agent_state": result["state"],
                "input_text": input_text,
                "operation_info": text,
                "task_ids": [out["task_id"] for out in output if "task_id" in out]
            }
            if message.get("keyboard") and any(
                    btn.get("callback_data", "").startswith("API:fetch:") for row in
                    message.get("keyboard", {}).get("inline_keyboard", []) for btn in row
            ):
                update_data["clarification_message_id"] = message_id or (
                    sent_message.message_id if sent_message else None)
            await state.update_data(**update_data)

        if message_id:
            try:
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                chat = await bot.get_chat(chat_id)
                sent_message = Message(
                    message_id=message_id,
                    chat=chat,
                    text=text,
                    date=datetime.now()  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ date
                )
                logger.info(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} —Å —Ç–µ–∫—Å—Ç–æ–º: {text[:50]}...")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")
                sent_message = await bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {sent_message.message_id} —Å —Ç–µ–∫—Å—Ç–æ–º: {text[:50]}...")
        else:
            sent_message = await bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {sent_message.message_id} —Å —Ç–µ–∫—Å—Ç–æ–º: {text[:50]}...")
            if output:
                await state.update_data(
                    message_id=sent_message.message_id,
                    operation_info=text,
                    task_ids=[out["task_id"] for out in output if "task_id" in out]
                )

    return sent_message
