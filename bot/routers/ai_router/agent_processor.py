"""
–ó–∞–ø—É—Å–∫–∞–µ–º Agent –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è.
"""

from __future__ import annotations

import asyncio
from datetime import datetime
from typing import Optional, Dict

from aiogram import Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from ...agent.agent import Agent
from ...agent.agents.serialization import serialize_messages, create_aiogram_keyboard
from ...api_client import ApiClient
from ...utils.logging import configure_logger
from ...utils.message_utils import cancel_expired_message

logger = configure_logger("[AGENT_PROCESSOR]", "cyan")


# ------------------------------------------------------------------ #
# 1. –ü—Ä–æ–∫—Å–∏ –∫ Agent.process_request                                  #
# ------------------------------------------------------------------ #
async def process_agent_request(
        agent: Agent,
        input_text: str,
        interactive: bool = True,
        prev_state: Dict | None = None,
        selection: str | None = None,
) -> Dict:
    return await agent.process_request(
        input_text,
        interactive=interactive,
        prev_state=prev_state,
        selection=selection,
    )


# ------------------------------------------------------------------ #
# 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º / —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç                              #
# ------------------------------------------------------------------ #
async def handle_agent_result(
        result: dict,
        bot: Bot,
        state: FSMContext,
        chat_id: int,
        input_text: str,
        api_client: ApiClient,
        message_id: Optional[int] = None,
) -> Message:
    logger.info(f"handle_agent_result ‚Üí chat={chat_id}")

    serialized = await serialize_messages(
        result.get("messages", []),
        api_client,
        result.get("state", {}).get("metadata", {}),
        result.get("output", []),
    )
    if not serialized:
        return await bot.send_message(chat_id, "üòì –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

    sent: Message | None = None
    current_msg_id = message_id  # —á—Ç–æ–± –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Å–±—Ä–æ—Å–∏—Ç—å
    data = await state.get_data()
    timer_tasks = data.get("timer_tasks", [])

    for idx, item in enumerate(serialized):
        text = item.get("text") or "üòì –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        kb = (
            await create_aiogram_keyboard(item["keyboard"])
            if item.get("keyboard")
            else None
        )

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º state (–Ω—É–∂–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
        if result.get("state"):
            await state.update_data(
                agent_state=result["state"],
                input_text=input_text,
                operation_info=text,
            )

        # --- –ø–µ—Ä–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ¬´–æ–∂–∏–¥–∞—é—â–µ–µ¬ª —Å–æ–æ–±—â–µ–Ω–∏–µ ---
        if current_msg_id:
            try:
                sent = await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=current_msg_id,
                    text=text,
                    reply_markup=kb,
                    parse_mode="HTML",
                )
            except Exception as e:
                logger.warning(f"Edit {current_msg_id} fail: {e}")
                sent = await bot.send_message(
                    chat_id=chat_id, text=text, reply_markup=kb, parse_mode="HTML"
                )
            current_msg_id = None  # –¥–∞–ª–µ–µ —Ç–æ–ª—å–∫–æ send
        else:
            sent = await bot.send_message(
                chat_id=chat_id, text=text, reply_markup=kb, parse_mode="HTML"
            )

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–º–µ–Ω—ã
        if sent and kb:  # –¢–æ–ª—å–∫–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            timer_task = asyncio.create_task(
                cancel_expired_message(bot, chat_id, sent.message_id, state, timeout=30)
            )
            timer_tasks.append({"message_id": sent.message_id, "task": timer_task})
            await state.update_data(timer_tasks=timer_tasks)

    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ / –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
    return sent
