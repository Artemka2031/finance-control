# bot/routers/ai_router/callback_handler.py
# -*- coding: utf-8 -*-

# ------------------------------------------------------------------ #
# 0. –ò–º–ø–æ—Ä—Ç—ã                                                         #
# ------------------------------------------------------------------ #
import asyncio
from datetime import datetime
from typing import Optional, Dict, Any

from aiogram import Router, Bot, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from .agent_processor import process_agent_request, handle_agent_result
from .states import MessageState
from ...agent.agent import Agent
from ...agent.agents.serialization import deserialize_callback_data
from ...api_client import ApiClient, CreditorIn, ExpenseIn, IncomeIn
from ...keyboards.start_kb import create_start_kb
from ...utils.logging import configure_logger
from ...utils.message_utils import (
    track_messages,
    delete_tracked_messages,
    format_operation_message,
    check_task_status,
    animate_processing,
    send_success_message,
)

logger = configure_logger("[CALLBACK_HANDLER]", "magenta")


# ------------------------------------------------------------------ #
# 1. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏                                         #
# ------------------------------------------------------------------ #
def _safe_state(data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç `agent_state` –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å.
    –ï—Å–ª–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ª–µ–∂–∏—Ç `None`, –ø–æ–¥–º–µ–Ω—è–µ—Ç –µ–≥–æ –Ω–∞ `{}`.
    """
    state_val = data.get("agent_state")
    return state_val if isinstance(state_val, dict) else {}


# ------------------------------------------------------------------ #
# 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞                                                #
# ------------------------------------------------------------------ #
def create_callback_router(bot: Bot, api_client: ApiClient) -> Router:
    router = Router()
    agent = Agent()

    # ------------------------------------------------------------------ #
    # 2.1. –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞) –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞         #
    # ------------------------------------------------------------------ #
    @router.callback_query(F.data.startswith("CS:") | F.data.startswith("cancel:"))
    @track_messages
    async def handle_category_selection(
            query: CallbackQuery, state: FSMContext, bot: Bot
    ) -> Optional[Message]:
        if not query.message:  # Safety-check
            logger.warning(f"CallbackQuery –±–µ–∑ message –æ—Ç {query.from_user.id}")
            return None

        user_id = query.from_user.id
        chat_id = query.message.chat.id
        message_id = query.message.message_id
        selection = query.data

        logger.info(f"{user_id=}: –≤—ã–±—Ä–∞–ª {selection=}")

        # -- –æ—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
        data = await state.get_data()
        for t in data.get("timer_tasks", []):
            t["task"].cancel()
        await state.update_data(timer_tasks=[])

        # -- –∏–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π agent_state
        data = await state.get_data()
        prev_state = _safe_state(data)
        input_text = data.get("input_text", "")

        # ---------- 2.1.a –û—Ç–º–µ–Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è ---------- #
        if selection.startswith("cancel:"):
            prev_state = deserialize_callback_data(selection, prev_state)
            await delete_tracked_messages(bot, state, chat_id, exclude_message_id=message_id)
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="‚ùå –£—Ç–æ—á–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                parse_mode="HTML",
            )
            # –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç ‚Äî –≤ –¥–µ—Ñ–æ–ª—Ç
            if not prev_state.get("requests"):
                await state.clear()
                await state.set_state(MessageState.waiting_for_ai_input)
                return await bot.send_message(
                    chat_id=chat_id,
                    text="üîÑ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é",
                    reply_markup=create_start_kb(),
                )

            # –∏–Ω–∞—á–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ
            processing = await bot.send_message(
                chat_id=chat_id, text="üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω—É‚Ä¶", parse_mode="HTML"
            )
            result = await process_agent_request(
                agent, input_text, interactive=True, selection=selection, prev_state=prev_state
            )
            return await handle_agent_result(
                result, bot, state, chat_id, input_text, api_client, message_id=processing.message_id
            )

        # ---------- 2.1.b –û–±—ã—á–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---------- #
        if not prev_state:
            logger.error(f"state –ø–æ—Ç–µ—Ä—è–Ω —É {user_id}")
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="üòì –û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Ç–µ—Ä—è–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å #–ò–ò",
                parse_mode="HTML",
            )
            return None

        prev_state = deserialize_callback_data(selection, prev_state)
        processing = await bot.send_message(chat_id=chat_id, text="üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä‚Ä¶", parse_mode="HTML")
        result = await process_agent_request(
            agent, input_text, interactive=True, selection=selection, prev_state=prev_state
        )
        return await handle_agent_result(
            result, bot, state, chat_id, input_text, api_client, message_id=processing.message_id
        )

    # ------------------------------------------------------------------ #
    # 2.2. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ / –æ—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏                                #
    # ------------------------------------------------------------------ #
    @router.callback_query(F.data.startswith("confirm_op:"))
    @track_messages
    async def handle_confirmation(
            query: CallbackQuery, state: FSMContext, bot: Bot
    ) -> Optional[Message]:
        if not query.message:
            return None

        user_id = query.from_user.id
        chat_id = query.message.chat.id
        message_id = query.message.message_id
        request_index = int(query.data.split(":")[1])

        logger.info(f"{user_id=}: –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–ø—Ä–æ—Å #{request_index}")

        # -- –æ—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
        data = await state.get_data()
        for t in data.get("timer_tasks", []):
            t["task"].cancel()
        await state.update_data(timer_tasks=[])

        # -- –¥–æ—Å—Ç–∞—ë–º —Ç–µ–∫—É—â–∏–π agent_state
        data = await state.get_data()
        operation_info = data.get("operation_info", "–û–ø–µ—Ä–∞—Ü–∏—è")
        prev_state = _safe_state(data)

        # -- –∏—â–µ–º –Ω—É–∂–Ω—ã–π request
        request = next(
            (r for r in prev_state.get("requests", []) if r.get("index", -1) == request_index),
            None,
        )
        if not request:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="üòì –û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                parse_mode="HTML",
            )
            return query.message

        await state.set_state(MessageState.confirming_operation)

        entities = request["entities"]
        intent = request["intent"]

        # ---------- 2.2.a –°—Ç–∞—Ç—É—Å ¬´‚è≥ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º‚Ä¶¬ª + –∞–Ω–∏–º–∞—Ü–∏—è ---------- #
        await bot.edit_message_text(
            chat_id=chat_id, message_id=message_id, text="‚è≥ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é‚Ä¶", parse_mode="HTML"
        )
        animation_task = asyncio.create_task(
            animate_processing(bot, chat_id, message_id, await format_operation_message(entities, api_client))
        )

        task_ids: list[str] = []
        try:
            # -- –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—É
            date_str = entities["date"]
            date_obj = datetime.strptime(date_str, "%d.%m.%y" if len(date_str) == 8 else "%d.%m.%Y")
            date_str = date_obj.strftime("%d.%m.%Y")

            # ---------- 2.2.b INTENT-—Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –≤—ã–∑–æ–≤—ã API ---------- #
            if intent == "add_income":
                dto = IncomeIn(
                    date=date_str,
                    cat_code=entities["category_code"],
                    amount=float(entities["amount"]),
                    comment=entities["comment"],
                )
                resp = await api_client.add_income(dto)
                if not resp.ok or not resp.task_id:
                    raise RuntimeError(resp.detail or "No task id")
                task_ids.append(resp.task_id)

            elif intent == "add_expense":
                dto = ExpenseIn(
                    date=date_str,
                    sec_code=entities["chapter_code"],
                    cat_code=entities["category_code"],
                    sub_code=entities["subcategory_code"],
                    amount=float(entities["amount"]),
                    comment=entities["comment"],
                )
                resp = await api_client.add_expense(dto)
                if not resp.ok or not resp.task_id:
                    raise RuntimeError(resp.detail or "No task id")
                task_ids.append(resp.task_id)

            elif intent == "borrow":
                dto_exp = ExpenseIn(
                    date=date_str,
                    sec_code=entities["chapter_code"],
                    cat_code=entities["category_code"],
                    sub_code=entities["subcategory_code"],
                    amount=float(entities["amount"]),
                    comment=entities["comment"],
                )
                dto_bor = CreditorIn(
                    date=date_str,
                    cred_code=entities["creditor"],
                    amount=float(entities["amount"]),
                    comment=entities["comment"],
                )
                resp_exp = await api_client.add_expense(dto_exp)
                resp_bor = await api_client.record_borrowing(dto_bor)
                if not all((resp_exp.ok, resp_exp.task_id, resp_bor.ok, resp_bor.task_id)):
                    raise RuntimeError("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–æ–ª–≥–∞ –∏ —Ä–∞—Å—Ö–æ–¥–∞")
                task_ids.extend([resp_exp.task_id, resp_bor.task_id])

            elif intent == "repay":
                dto = CreditorIn(
                    date=date_str,
                    cred_code=entities["creditor"],
                    amount=float(entities["amount"]),
                    comment=entities["comment"],
                )
                resp = await api_client.record_repayment(dto)
                if not resp.ok or not resp.task_id:
                    raise RuntimeError(resp.detail or "No task id")
                task_ids.append(resp.task_id)

            # ---------- 2.2.c –ñ–¥—ë–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ ---------- #
            results = await asyncio.gather(*(check_task_status(api_client, tid) for tid in task_ids))
            if not all(results):
                raise RuntimeError("–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ")

            # ---------- 2.2.d –£—Å–ø–µ—Ö ---------- #
            animation_task.cancel()
            success_text = {
                "add_income": "‚úÖ –î–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
                "add_expense": "‚úÖ –†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
                "borrow": "‚úÖ –ó–∞–ø–∏—Å–∞–Ω –¥–æ–ª–≥ –∏ —Ä–∞—Å—Ö–æ–¥",
                "repay": "‚úÖ –í–æ–∑–≤—Ä–∞—Ç –¥–æ–ª–≥–∞",
            }.get(intent, "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            await send_success_message(
                bot,
                chat_id,
                message_id,
                f"{await format_operation_message(entities, api_client)}\n\n{success_text}",
                task_ids,
                state,
                operation_info,
            )
            # —á–∏—Å—Ç–∏–º —Ç–∞–π–º–µ—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            timer_tasks = data.get("timer_tasks", [])
            timer_tasks = [t for t in timer_tasks if t["message_id"] != message_id]
            await state.update_data(timer_tasks=timer_tasks)
            return query.message

        except Exception as err:
            animation_task.cancel()
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f"üòì –û—à–∏–±–∫–∞:\n{operation_info}\n\n{err} ‚ùå",
                parse_mode="HTML",
            )
            return query.message  # —á—Ç–æ–±—ã —Ç—Ä–µ–∫–µ—Ä –Ω–µ —Ä—É–≥–∞–ª—Å—è

    # ------------------------------------------------------------------ #
    # 2.3. –í–æ–∑–≤—Ä–∞—Ç —Ä–æ—É—Ç–µ—Ä–∞                                               #
    # ------------------------------------------------------------------ #
    return router
