from aiogram import Router, Bot, html
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from api_client import ApiClient
from filters.check_date import CheckDateFilter
from keyboards.today import create_today_keyboard
from keyboards.utils import TodayCallback
from keyboards.wallet import create_wallet_keyboard
from routers.expenses.state_classes import Expense
from utils.logging import configure_logger
from utils.message_utils import track_messages, delete_tracked_messages, delete_message

logger = configure_logger("[DATE]", "cyan")

def create_date_router(bot: Bot, api_client: ApiClient):
    date_router = Router()

    @date_router.callback_query(Expense.date, TodayCallback.filter())
    @track_messages
    async def change_date(query: CallbackQuery, state: FSMContext, bot: Bot) -> Message:
        date = TodayCallback.unpack(query.data).today
        await state.update_data(date=date)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –∫–ª—é—á–µ–≤–æ–µ
        try:
            await query.message.edit_text(f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: üóìÔ∏è {html.bold(date)}", reply_markup=None)
            logger.debug(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {query.message.message_id} —Å –¥–∞—Ç–æ–π {date}")
            await state.update_data(date_message_id=query.message.message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {query.message.message_id}: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_message = await bot.send_message(
                chat_id=query.message.chat.id,
                text=f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: üóìÔ∏è {html.bold(date)}",
                reply_markup=None
            )
            await state.update_data(date_message_id=new_message.message_id)
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {new_message.message_id} —Å –¥–∞—Ç–æ–π {date}")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ
        await delete_tracked_messages(bot, state, query.message.chat.id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ—à–µ–ª—å–∫–∞
        wallet_message = await bot.send_message(
            chat_id=query.message.chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤: üí∏",
            reply_markup=create_wallet_keyboard()
        )
        await state.update_data(wallet_message_id=wallet_message.message_id)
        await state.set_state(Expense.wallet)
        return query.message  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∫–ª—é—á–µ–≤–æ–µ

    @date_router.message(Expense.date, CheckDateFilter())
    @track_messages
    async def set_date_text(message: Message, state: FSMContext, bot: Bot) -> Message:
        date = message.text
        await state.update_data(date=date)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await delete_message(bot, message.chat.id, message.message_id)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        data = await state.get_data()
        date_message_id = data.get("date_message_id")
        if date_message_id:
            try:
                await bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=date_message_id,
                    text=f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: üóìÔ∏è {html.bold(date)}",
                    reply_markup=None
                )
                logger.debug(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {date_message_id} —Å –¥–∞—Ç–æ–π {date}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {date_message_id}: {e}")
                new_message = await bot.send_message(
                    chat_id=message.chat.id,
                    text=f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: üóìÔ∏è {html.bold(date)}",
                    reply_markup=None
                )
                date_message_id = new_message.message_id
                await state.update_data(date_message_id=date_message_id)
                logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {date_message_id} —Å –¥–∞—Ç–æ–π {date}")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await delete_tracked_messages(bot, state, message.chat.id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ—à–µ–ª—å–∫–∞
        wallet_message = await bot.send_message(
            chat_id=message.chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤: üí∏",
            reply_markup=create_wallet_keyboard()
        )
        await state.update_data(wallet_message_id=wallet_message.message_id)
        await state.set_state(Expense.wallet)
        return message  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

    @date_router.message(Expense.date)
    @track_messages
    async def invalid_date_format(message: Message, state: FSMContext, bot: Bot) -> Message:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await delete_message(bot, message.chat.id, message.message_id)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await delete_tracked_messages(bot, state, message.chat.id)

        sent_message = await bot.send_message(
            chat_id=message.chat.id,
            text="–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥ –∏–ª–∏ –¥–¥.–º–º.–≥–≥–≥–≥. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ: üóìÔ∏è",
            reply_markup=create_today_keyboard()
        )
        await state.update_data(date_message_id=sent_message.message_id)
        await state.set_state(Expense.date)
        return sent_message

    return date_router