from aiogram import Router, F, Bot, html
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup

from ..expenses.state_classes import Expense
from ...api_client import ApiClient
from ...keyboards.category import create_section_keyboard, create_category_keyboard, create_subcategory_keyboard
from ...keyboards.utils import ChooseSectionCallback, ChooseCategoryCallback, ChooseSubCategoryCallback
from ...keyboards.wallet import create_wallet_keyboard
from ...utils.logging import configure_logger
from ...utils.message_utils import track_messages, delete_tracked_messages

logger = configure_logger("[CATEGORY]", "purple")

def create_category_router(bot: Bot, api_client: ApiClient):
    category_router = Router()

    async def update_status_message(chat_id: int, state: FSMContext, bot: Bot, message_id: int = None,
                                    keyboard: InlineKeyboardMarkup = None) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –≤—ã–±–æ—Ä–∞–º–∏ —Ä–∞–∑–¥–µ–ª–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        data = await state.get_data()
        status_message_id = data.get("status_message_id")
        chapter_name = data.get("chapter_name", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
        category_name = data.get("category_name", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
        subcategory_name = data.get("subcategory_name", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")

        text = (
            f"–†–∞–∑–¥–µ–ª: {html.bold(chapter_name)}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {html.bold(category_name)}\n"
            f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {html.bold(subcategory_name)}"
        )

        try:
            if message_id:
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                if message_id != status_message_id:
                    await state.update_data(status_message_id=message_id)
                logger.debug(f"–°–æ–∑–¥–∞–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}")
            else:
                new_message = await bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                await state.update_data(status_message_id=new_message.message_id)
                logger.debug(f"–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {new_message.message_id} –≤ —á–∞—Ç–µ {chat_id}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}: {e}")
            new_message = await bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await state.update_data(status_message_id=new_message.message_id)
            logger.debug(f"–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {new_message.message_id} –≤ —á–∞—Ç–µ {chat_id}")

    @category_router.callback_query(Expense.chapter_code, ChooseSectionCallback.filter(F.back == False))
    @track_messages
    async def set_chapter(query: CallbackQuery, state: FSMContext, bot: Bot, **kwargs) -> Message:
        callback_data = kwargs.get("callback_data")
        if not query.message:
            logger.warning(
                f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ CallbackQuery –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}, callback_data={callback_data}")
            return None
        user_id = query.from_user.id
        chat_id = query.message.chat.id
        message_id = query.message.message_id
        chapter_code = callback_data.section_code
        current_state = await state.get_state()
        data = await state.get_data()
        messages_to_delete = data.get("messages_to_delete", [])

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ä–∞–∑–¥–µ–ª '{chapter_code}' (callback_data={callback_data}), "
                    f"message_id={message_id}, current_state={current_state}, messages_to_delete={messages_to_delete}")

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
        sections = await api_client.get_sections()
        chapter_name = next((sec.name for sec in sections if sec.code == chapter_code), chapter_code)
        await state.update_data(chapter_code=chapter_code, chapter_name=chapter_name)

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        keyboard = await create_category_keyboard(api_client, chapter_code)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await update_status_message(chat_id, state, bot, message_id, keyboard)
        await state.set_state(Expense.category_code)
        logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Expense.category_code, –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}")
        return query.message

    @category_router.callback_query(Expense.chapter_code, ChooseSectionCallback.filter(F.back == True))
    @track_messages
    async def back_to_wallet(query: CallbackQuery, state: FSMContext, bot: Bot, **kwargs) -> Message:
        callback_data = kwargs.get("callback_data")
        if not query.message:
            logger.warning(
                f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ CallbackQuery –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}, callback_data={callback_data}")
            return None
        user_id = query.from_user.id
        chat_id = query.message.chat.id
        message_id = query.message.message_id
        current_state = await state.get_state()
        data = await state.get_data()
        messages_to_delete = data.get("messages_to_delete", [])

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª '–ù–∞–∑–∞–¥' (callback_data={callback_data}), "
                    f"message_id={message_id}, current_state={current_state}, messages_to_delete={messages_to_delete}")

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–¥–µ–ª–µ, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await state.update_data(chapter_code=None, chapter_name="–ù–µ –≤—ã–±—Ä–∞–Ω–æ",
                                category_code=None, category_name="–ù–µ –≤—ã–±—Ä–∞–Ω–æ",
                                subcategory_code=None, subcategory_name="–ù–µ –≤—ã–±—Ä–∞–Ω–æ")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await delete_tracked_messages(bot, state, chat_id)

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–æ—à–µ–ª—å–∫–æ–≤
        keyboard = create_wallet_keyboard()
        if not keyboard or not keyboard.inline_keyboard:
            logger.error(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ create_wallet_keyboard() –ø—É—Å—Ç–∞ –∏–ª–∏ None –≤ —á–∞—Ç–µ {chat_id}")
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∫–æ—à–µ–ª—å–∫–æ–≤
        try:
            await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫: üí∏", reply_markup=keyboard)
            logger.debug(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –∫–æ—à–µ–ª—å–∫–∞ –≤ —á–∞—Ç–µ {chat_id}")
            await state.update_data(wallet_message_id=message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
            wallet_message = await bot.send_message(
                chat_id=chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫: üí∏",
                reply_markup=keyboard
            )
            await state.update_data(wallet_message_id=wallet_message.message_id)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {wallet_message.message_id} –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ—à–µ–ª—å–∫–∞ –≤ —á–∞—Ç–µ {chat_id}")
            return wallet_message

        await state.set_state(Expense.wallet)
        logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Expense.wallet, messages_to_delete={messages_to_delete}")
        return query.message

    @category_router.callback_query(Expense.category_code, ChooseCategoryCallback.filter(F.back == True))
    @track_messages
    async def back_to_chapters(query: CallbackQuery, state: FSMContext, bot: Bot, **kwargs) -> Message:
        callback_data = kwargs.get("callback_data")
        if not query.message:
            logger.warning(
                f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ CallbackQuery –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}, callback_data={callback_data}")
            return None
        user_id = query.from_user.id
        chat_id = query.message.chat.id
        message_id = query.message.message_id
        current_state = await state.get_state()
        data = await state.get_data()
        messages_to_delete = data.get("messages_to_delete", [])

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª '–ù–∞–∑–∞–¥' (callback_data={callback_data}), "
                    f"message_id={message_id}, current_state={current_state}, messages_to_delete={messages_to_delete}")

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await state.update_data(category_code=None, category_name="–ù–µ –≤—ã–±—Ä–∞–Ω–æ",
                                subcategory_code=None, subcategory_name="–ù–µ –≤—ã–±—Ä–∞–Ω–æ")

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–∞–∑–¥–µ–ª–æ–≤
        keyboard = await create_section_keyboard(api_client)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Ä–∞–∑–¥–µ–ª–æ–≤
        await update_status_message(chat_id, state, bot, message_id, keyboard)
        await state.set_state(Expense.chapter_code)
        logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Expense.chapter_code, –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}")
        return query.message

    @category_router.callback_query(Expense.category_code, ChooseCategoryCallback.filter(F.back == False))
    @track_messages
    async def set_category(query: CallbackQuery, state: FSMContext, bot: Bot, **kwargs) -> Message:
        callback_data = kwargs.get("callback_data")
        if not query.message:
            logger.warning(
                f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ CallbackQuery –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}, callback_data={callback_data}")
            return None
        user_id = query.from_user.id
        chat_id = query.message.chat.id
        message_id = query.message.message_id
        chapter_code = (await state.get_data())["chapter_code"]
        category_code = callback_data.category_code
        current_state = await state.get_state()
        data = await state.get_data()
        messages_to_delete = data.get("messages_to_delete", [])

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_code}' (callback_data={callback_data}), "
                    f"message_id={message_id}, current_state={current_state}, messages_to_delete={messages_to_delete}")

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = await api_client.get_categories(chapter_code)
        category_name = next((cat.name for cat in categories if cat.code == category_code), category_code)
        await state.update_data(category_code=category_code, category_name=category_name)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        subcategories = await api_client.get_subcategories(chapter_code, category_code)
        if subcategories:
            keyboard = await create_subcategory_keyboard(api_client, chapter_code, category_code)
            await update_status_message(chat_id, state, bot, message_id, keyboard)
            await state.set_state(Expense.subcategory_code)
            logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Expense.subcategory_code, –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}")
            return query.message
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            await update_status_message(chat_id, state, bot, message_id)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
            amount_message = await bot.send_message(
                chat_id=chat_id,
                text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞: üí∞"
            )
            await state.update_data(amount_message_id=amount_message.message_id)
            await state.set_state(Expense.amount)
            logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Expense.amount, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {amount_message.message_id}")
            return query.message

    @category_router.callback_query(Expense.subcategory_code, ChooseSubCategoryCallback.filter(F.back == True))
    @track_messages
    async def back_to_category(query: CallbackQuery, state: FSMContext, bot: Bot, **kwargs) -> Message:
        callback_data = kwargs.get("callback_data")
        if not query.message:
            logger.warning(
                f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ CallbackQuery –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}, callback_data={callback_data}")
            return None
        user_id = query.from_user.id
        chat_id = query.message.chat.id
        message_id = query.message.message_id
        chapter_code = (await state.get_data())["chapter_code"]
        current_state = await state.get_state()
        data = await state.get_data()
        messages_to_delete = data.get("messages_to_delete", [])

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª '–ù–∞–∑–∞–¥' (callback_data={callback_data}), "
                    f"message_id={message_id}, current_state={current_state}, messages_to_delete={messages_to_delete}")

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await state.update_data(subcategory_code=None, subcategory_name="–ù–µ –≤—ã–±—Ä–∞–Ω–æ")

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        keyboard = await create_category_keyboard(api_client, chapter_code)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await update_status_message(chat_id, state, bot, message_id, keyboard)
        await state.set_state(Expense.category_code)
        logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Expense.category_code, –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}")
        return query.message

    @category_router.callback_query(Expense.subcategory_code, ChooseSubCategoryCallback.filter(F.back == False))
    @track_messages
    async def set_subcategory(query: CallbackQuery, state: FSMContext, bot: Bot, **kwargs) -> Message:
        callback_data = kwargs.get("callback_data")
        if not query.message:
            logger.warning(
                f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ CallbackQuery –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}, callback_data={callback_data}")
            return None
        user_id = query.from_user.id
        chat_id = query.message.chat.id
        message_id = query.message.message_id
        chapter_code = (await state.get_data())["chapter_code"]
        category_code = (await state.get_data())["category_code"]
        subcategory_code = callback_data.subcategory_code
        current_state = await state.get_state()
        data = await state.get_data()
        messages_to_delete = data.get("messages_to_delete", [])

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é '{subcategory_code}' (callback_data={callback_data}), "
                    f"message_id={message_id}, current_state={current_state}, messages_to_delete={messages_to_delete}")

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        subcategories = await api_client.get_subcategories(chapter_code, category_code)
        subcategory_name = next((sub.name for sub in subcategories if sub.code == subcategory_code), subcategory_code)
        await state.update_data(subcategory_code=subcategory_code, subcategory_name=subcategory_name)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await update_status_message(chat_id, state, bot, message_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
        amount_message = await bot.send_message(
            chat_id=chat_id,
            text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞: üí∞"
        )
        await state.update_data(amount_message_id=amount_message.message_id)
        await state.set_state(Expense.amount)
        logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Expense.amount, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {amount_message.message_id}")
        return query.message

    return category_router