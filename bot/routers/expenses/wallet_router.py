from aiogram import Router, F, Bot, html
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup

from ..expenses.state_classes import Expense
from ...api_client import ApiClient
from ...keyboards.category import create_section_keyboard
from ...keyboards.utils import ChooseWalletCallback, ChooseCreditorCallback
from ...keyboards.wallet import create_wallet_keyboard
from ...utils.logging import configure_logger
from ...utils.message_utils import track_messages, delete_tracked_messages

logger = configure_logger("[WALLET]", "green")

# –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–¥–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
WALLET_NAMES = {
    "project": "–ü—Ä–æ–µ–∫—Ç",
    "borrow": "–í–∑—è—Ç—å –≤ –¥–æ–ª–≥",
    "repay": "–í–µ—Ä–Ω—É—Ç—å –¥–æ–ª–≥",
    "dividends": "–î–∏–≤–∏–¥–µ–Ω–¥—ã"
}

def create_wallet_router(bot: Bot, api_client: ApiClient):
    wallet_router = Router()

    @wallet_router.callback_query(Expense.wallet, ChooseWalletCallback.filter())
    @track_messages
    async def choose_wallet(query: CallbackQuery, state: FSMContext, bot: Bot,
                            callback_data: ChooseWalletCallback) -> Message:
        if not query.message:
            logger.warning(
                f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ CallbackQuery –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}, callback_data={callback_data}")
            return None
        user_id = query.from_user.id
        chat_id = query.message.chat.id
        message_id = query.message.message_id
        wallet = callback_data.wallet
        wallet_name = WALLET_NAMES.get(wallet, wallet)
        current_state = await state.get_state()
        data = await state.get_data()
        messages_to_delete = data.get("messages_to_delete", [])

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∫–æ—à–µ–ª—ë–∫ '{wallet_name}' (code={wallet}), "
                    f"message_id={message_id}, current_state={current_state}, messages_to_delete={messages_to_delete}")

        await state.update_data(wallet=wallet, wallet_name=wallet_name)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await delete_tracked_messages(bot, state, chat_id)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        try:
            await query.message.edit_text(f"–í—ã–±—Ä–∞–Ω –∫–æ—à–µ–ª—ë–∫: üí∏ {html.bold(wallet_name)}", reply_markup=None)
            logger.debug(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} —Å –∫–æ—à–µ–ª—å–∫–æ–º '{wallet_name}' –≤ —á–∞—Ç–µ {chat_id}")
            await state.update_data(wallet_message_id=message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_message = await bot.send_message(
                chat_id=chat_id,
                text=f"–í—ã–±—Ä–∞–Ω –∫–æ—à–µ–ª—ë–∫: üí∏ {html.bold(wallet_name)}",
                reply_markup=None
            )
            await state.update_data(wallet_message_id=new_message.message_id)
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {new_message.message_id} —Å –∫–æ—à–µ–ª—å–∫–æ–º '{wallet_name}'")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ—à–µ–ª—å–∫–∞
        if wallet in ["project", "dividends"]:
            section_message = await bot.send_message(
                chat_id=chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª: üìã",
                reply_markup=await create_section_keyboard(api_client)
            )
            await state.update_data(status_message_id=section_message.message_id)
            await state.set_state(Expense.chapter_code)
            logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Expense.chapter_code, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {section_message.message_id}")
        elif wallet == "borrow":
            creditors = await api_client.get_creditors()
            items = [(creditor.name, creditor.code, ChooseCreditorCallback(creditor=creditor.code, back=False)) for
                     creditor in creditors]
            back_callback = ChooseCreditorCallback(creditor="back", back=True)
            kb = api_client.build_inline_keyboard(items, adjust=1, back_button=True, back_callback=back_callback)

            creditor_message = await bot.send_message(
                chat_id=chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞: üë§",
                reply_markup=kb
            )
            await state.update_data(creditor_message_id=creditor_message.message_id)
            await state.set_state(Expense.creditor_borrow)
            logger.info(
                f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Expense.creditor_borrow, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {creditor_message.message_id}")
        elif wallet == "repay":
            creditors = await api_client.get_creditors()
            items = [(creditor.name, creditor.code, ChooseCreditorCallback(creditor=creditor.code, back=False)) for
                     creditor in creditors]
            back_callback = ChooseCreditorCallback(creditor="back", back=True)
            kb = api_client.build_inline_keyboard(items, adjust=1, back_button=True, back_callback=back_callback)

            creditor_message = await bot.send_message(
                chat_id=chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–ª–≥–∞: üë§",
                reply_markup=kb
            )
            await state.update_data(creditor_message_id=creditor_message.message_id)
            await state.set_state(Expense.creditor_return)
            logger.info(
                f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Expense.creditor_return, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {creditor_message.message_id}")

        return query.message  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∫–ª—é—á–µ–≤–æ–µ

    @wallet_router.callback_query(ChooseCreditorCallback.filter(F.back == True))
    @track_messages
    async def back_to_wallet_selection(query: CallbackQuery, state: FSMContext, bot: Bot,
                                       callback_data: ChooseCreditorCallback) -> Message:
        if not query.message:
            logger.warning(
                f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ CallbackQuery –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}, callback_data={callback_data}")
            return None
        user_id = query.from_user.id
        chat_id = query.message.chat.id
        message_id = query.message.message_id
        current_state = await state.get_state()
        data = await state.get_data()
        messages_to_delete = data.get("messages_to_delete", [])

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª '–ù–∞–∑–∞–¥' (callback_data={callback_data}), "
                    f"message_id={message_id}, current_state={current_state}, messages_to_delete={messages_to_delete}")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await delete_tracked_messages(bot, state, chat_id)

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = create_wallet_keyboard()
        if not keyboard or not keyboard.inline_keyboard:
            logger.error(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ create_wallet_keyboard() –ø—É—Å—Ç–∞ –∏–ª–∏ None –≤ —á–∞—Ç–µ {chat_id}")
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫: üí∏", reply_markup=keyboard)
            logger.debug(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –∫–æ—à–µ–ª—å–∫–∞ –≤ —á–∞—Ç–µ {chat_id}")
            await state.update_data(wallet_message_id=message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_message = await bot.send_message(
                chat_id=chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫: üí∏",
                reply_markup=keyboard
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {new_message.message_id} –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ—à–µ–ª—å–∫–∞ –≤ —á–∞—Ç–µ {chat_id}")
            await state.update_data(wallet_message_id=new_message.message_id)
            return new_message

        await state.set_state(Expense.wallet)
        logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Expense.wallet, messages_to_delete={messages_to_delete}")
        return query.message

    @wallet_router.callback_query(Expense.creditor_borrow, ChooseCreditorCallback.filter(F.back == False))
    @track_messages
    async def choose_creditor(query: CallbackQuery, state: FSMContext, bot: Bot,
                              callback_data: ChooseCreditorCallback) -> Message:
        if not query.message:
            logger.warning(
                f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ CallbackQuery –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}, callback_data={callback_data}")
            return None
        user_id = query.from_user.id
        chat_id = query.message.chat.id
        message_id = query.message.message_id
        creditor = callback_data.creditor
        current_state = await state.get_state()
        data = await state.get_data()
        messages_to_delete = data.get("messages_to_delete", [])

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞ '{creditor}' (callback_data={callback_data}), "
                    f"message_id={message_id}, current_state={current_state}, messages_to_delete={messages_to_delete}")

        await state.update_data(creditor=creditor, creditor_name=creditor)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await delete_tracked_messages(bot, state, chat_id)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        try:
            await query.message.edit_text(f"–í—ã–±—Ä–∞–Ω –∫—Ä–µ–¥–∏—Ç–æ—Ä: üë§ {html.bold(creditor)}", reply_markup=None)
            logger.debug(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} —Å –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–º '{creditor}' –≤ —á–∞—Ç–µ {chat_id}")
            await state.update_data(creditor_message_id=message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_message = await bot.send_message(
                chat_id=chat_id,
                text=f"–í—ã–±—Ä–∞–Ω –∫—Ä–µ–¥–∏—Ç–æ—Ä: üë§ {html.bold(creditor)}",
                reply_markup=None
            )
            await state.update_data(creditor_message_id=new_message.message_id)
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {new_message.message_id} —Å –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–º '{creditor}'")

        section_message = await bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª: üìã",
            reply_markup=await create_section_keyboard(api_client)
        )
        await state.update_data(status_message_id=section_message.message_id)
        await state.set_state(Expense.chapter_code)
        logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Expense.chapter_code, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {section_message.message_id}")
        return query.message

    @wallet_router.callback_query(Expense.creditor_return, ChooseCreditorCallback.filter(F.back == False))
    @track_messages
    async def choose_creditor_for_return_debt(query: CallbackQuery, state: FSMContext, bot: Bot,
                                              callback_data: ChooseCreditorCallback) -> Message:
        if not query.message:
            logger.warning(
                f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ CallbackQuery –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}, callback_data={callback_data}")
            return None
        user_id = query.from_user.id
        chat_id = query.message.chat.id
        message_id = query.message.message_id
        creditor = callback_data.creditor
        current_state = await state.get_state()
        data = await state.get_data()
        messages_to_delete = data.get("messages_to_delete", [])

        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–ª–≥–∞ '{creditor}' (callback_data={callback_data}), "
            f"message_id={message_id}, current_state={current_state}, messages_to_delete={messages_to_delete}")

        await state.update_data(creditor=creditor, creditor_name=creditor)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await delete_tracked_messages(bot, state, chat_id)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        try:
            await query.message.edit_text(f"–í–æ–∑–≤—Ä–∞—Ç –¥–æ–ª–≥–∞: üë§ {html.bold(creditor)}", reply_markup=None)
            logger.debug(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –¥–æ–ª–≥–∞ –¥–ª—è '{creditor}' –≤ —á–∞—Ç–µ {chat_id}")
            await state.update_data(creditor_message_id=message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_message = await bot.send_message(
                chat_id=chat_id,
                text=f"–í–æ–∑–≤—Ä–∞—Ç –¥–æ–ª–≥–∞: üë§ {html.bold(creditor)}",
                reply_markup=None
            )
            await state.update_data(creditor_message_id=new_message.message_id)
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {new_message.message_id} —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –¥–æ–ª–≥–∞ –¥–ª—è '{creditor}'")

        amount_message = await bot.send_message(
            chat_id=chat_id,
            text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–æ–∑–≤—Ä–∞—Ç–∞: üí∞"
        )
        await state.update_data(amount_message_id=amount_message.message_id)
        await state.set_state(Expense.amount)
        logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Expense.amount, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {amount_message.message_id}")
        return query.message

    return wallet_router