from aiogram import Router, Bot, html
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from ..expenses.state_classes import Expense
from ...api_client import ApiClient
from ...filters.check_amount import CheckAmountFilter
from ...utils.logging import configure_logger
from ...utils.message_utils import track_messages, delete_message, delete_tracked_messages

logger = configure_logger("[AMOUNT]", "orange")

def create_amount_router(bot: Bot, api_client: ApiClient):
    amount_router = Router()

    @amount_router.message(Expense.amount, CheckAmountFilter())
    @track_messages
    async def set_amount(message: Message, state: FSMContext, bot: Bot) -> Message:
        amount = float(message.text.replace(',', '.'))
        await state.update_data(amount=amount)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await delete_message(bot, message.chat.id, message.message_id)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await delete_tracked_messages(bot, state, message.chat.id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—É–º–º–µ
        data = await state.get_data()
        amount_message_id = data.get("amount_message_id")
        amount_message = None
        if amount_message_id:
            try:
                amount_message = await bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=amount_message_id,
                    text=f"–í—ã–±—Ä–∞–Ω–∞ —Å—É–º–º–∞: üí∞ {html.bold(amount)} ‚ÇΩ",
                    reply_markup=None
                )
                logger.debug(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {amount_message_id} —Å —Å—É–º–º–æ–π {amount}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {amount_message_id}: {e}")
                amount_message = await bot.send_message(
                    chat_id=message.chat.id,
                    text=f"–í—ã–±—Ä–∞–Ω–∞ —Å—É–º–º–∞: üí∞ {html.bold(amount)} ‚ÇΩ",
                    reply_markup=None
                )
                amount_message_id = amount_message.message_id
                await state.update_data(amount_message_id=amount_message_id)
                logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {amount_message_id} —Å —Å—É–º–º–æ–π {amount}")

        wallet = data.get("wallet")
        if wallet == "borrow":
            # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (1.0)", callback_data="COEF:1.0")]
            ])
            saving_message = await bot.send_message(
                chat_id=message.chat.id,
                text="–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —ç–∫–æ–Ω–æ–º–∏–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: üìä",
                reply_markup=keyboard
            )
            await state.update_data(coefficient_message_id=saving_message.message_id)
            await state.set_state(Expense.coefficient)
        else:
            comment_message = await bot.send_message(
                chat_id=message.chat.id,
                text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: üí¨"
            )
            await state.update_data(comment_message_id=comment_message.message_id)
            await state.set_state(Expense.comment)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—É–º–º–µ
        return amount_message

    @amount_router.callback_query(Expense.coefficient, lambda c: c.data.startswith("COEF:"))
    @track_messages
    async def set_default_coefficient(query: CallbackQuery, state: FSMContext, bot: Bot) -> Message:
        coefficient = float(query.data.split(":")[1])
        await state.update_data(coefficient=coefficient)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await delete_tracked_messages(bot, state, query.message.chat.id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–µ
        data = await state.get_data()
        coefficient_message_id = data.get("coefficient_message_id")
        coefficient_message = None
        if coefficient_message_id:
            try:
                coefficient_message = await bot.edit_message_text(
                    chat_id=query.message.chat.id,
                    message_id=coefficient_message_id,
                    text=f"–í—ã–±—Ä–∞–Ω –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —ç–∫–æ–Ω–æ–º–∏–∏: üìä {html.bold(coefficient)}",
                    reply_markup=None
                )
                logger.debug(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {coefficient_message_id} —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º {coefficient}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {coefficient_message_id}: {e}")
                coefficient_message = await bot.send_message(
                    chat_id=query.message.chat.id,
                    text=f"–í—ã–±—Ä–∞–Ω –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —ç–∫–æ–Ω–æ–º–∏–∏: üìä {html.bold(coefficient)}",
                    reply_markup=None
                )
                await state.update_data(coefficient_message_id=coefficient_message.message_id)
                logger.debug(
                    f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {coefficient_message.message_id} —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º {coefficient}")

        comment_message = await bot.send_message(
            chat_id=query.message.chat.id,
            text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: üí¨"
        )
        await state.update_data(comment_message_id=comment_message.message_id)
        await state.set_state(Expense.comment)
        return coefficient_message

    @amount_router.message(Expense.coefficient)
    @track_messages
    async def set_coefficient(message: Message, state: FSMContext, bot: Bot) -> Message:
        try:
            coefficient = float(message.text.replace(',', '.'))
            if coefficient <= 0:
                raise ValueError("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        except ValueError:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await delete_message(bot, message.chat.id, message.message_id)
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await delete_tracked_messages(bot, state, message.chat.id)
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (1.0)", callback_data="COEF:1.0")]
            ])
            sent_message = await bot.send_message(
                chat_id=message.chat.id,
                text="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0 (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: –∑–∞–ø—è—Ç–∞—è). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: üìä",
                reply_markup=keyboard
            )
            await state.update_data(coefficient_message_id=sent_message.message_id)
            await state.set_state(Expense.coefficient)
            return sent_message

        await state.update_data(coefficient=coefficient)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await delete_message(bot, message.chat.id, message.message_id)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await delete_tracked_messages(bot, state, message.chat.id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–µ
        data = await state.get_data()
        coefficient_message_id = data.get("coefficient_message_id")
        coefficient_message = None
        if coefficient_message_id:
            try:
                coefficient_message = await bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=coefficient_message_id,
                    text=f"–í—ã–±—Ä–∞–Ω –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —ç–∫–æ–Ω–æ–º–∏–∏: üìä {html.bold(coefficient)}",
                    reply_markup=None
                )
                logger.debug(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {coefficient_message_id} —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º {coefficient}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {coefficient_message_id}: {e}")
                coefficient_message = await bot.send_message(
                    chat_id=message.chat.id,
                    text=f"–í—ã–±—Ä–∞–Ω –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —ç–∫–æ–Ω–æ–º–∏–∏: üìä {html.bold(coefficient)}",
                    reply_markup=None
                )
                await state.update_data(coefficient_message_id=coefficient_message.message_id)
                logger.debug(
                    f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {coefficient_message.message_id} —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º {coefficient}")

        comment_message = await bot.send_message(
            chat_id=message.chat.id,
            text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: üí¨"
        )
        await state.update_data(comment_message_id=comment_message.message_id)
        await state.set_state(Expense.comment)
        return coefficient_message

    @amount_router.message(Expense.amount)
    @track_messages
    async def incorrect_amount(message: Message, state: FSMContext, bot: Bot) -> Message:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await delete_message(bot, message.chat.id, message.message_id)
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await delete_tracked_messages(bot, state, message.chat.id)
        sent_message = await bot.send_message(
            chat_id=message.chat.id,
            text="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0 (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: –∑–∞–ø—è—Ç–∞—è). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: üí∞"
        )
        await state.update_data(amount_message_id=sent_message.message_id)
        await state.set_state(Expense.amount)
        return sent_message

    return amount_router