from functools import wraps
from typing import Union, Optional, List

from aiogram import Bot
from aiogram import html
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
import asyncio

from .logging import configure_logger
from ..api_client import ApiClient
from ..keyboards.delete import create_delete_operation_kb

# Configure utils logger
logger = configure_logger("[UTILS]", "blue")

# ------------------------------------------------------------------ #
# 1. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã                                       #
# ------------------------------------------------------------------ #
KEY_MESSAGE_FIELDS = {
    "Expense:date": "date_message_id",
    "Expense:wallet": "wallet_message_id",
    "Expense:chapter_code": "status_message_id",
    "Expense:category_code": "status_message_id",
    "Expense:subcategory_code": "status_message_id",
    "Expense:amount": "amount_message_id",
    "Expense:coefficient": "coefficient_message_id",
    "Expense:comment": "comment_message_id",
    "Expense:creditor_borrow": "creditor_message_id",
    "Expense:creditor_return": "creditor_message_id",
    "Income:date": "date_message_id",
    "Income:category_code": "category_message_id",
    "Income:amount": "amount_message_id",
    "Income:comment": "comment_message_id",
    "Income:confirm": "comment_message_id",
    "Income:delete_income": "comment_message_id",
    "AI:clarify:chapter_code": "clarification_message_id",
    "AI:clarify:category_code": "clarification_message_id",
    "AI:clarify:subcategory_code": "clarification_message_id",
    "AI:clarify:creditor": "clarification_message_id",
    "AI:clarify:amount": "clarification_message_id",
    "AI:clarify:date": "clarification_message_id",
    "AI:clarify:coefficient": "clarification_message_id",
    "AI:clarify:comment": "clarification_message_id",
    "AI:confirm": "confirmation_message_id",
}


# ------------------------------------------------------------------ #
# 2. –ê–Ω–∏–º–∞—Ü–∏—è ¬´‚Ä¶¬ª                                                    #
# ------------------------------------------------------------------ #
async def animate_processing(bot: Bot, chat_id: int, message_id: int, base_text: str) -> None:
    dots = [".", "..", "..."]
    while True:
        for d in dots:
            try:
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=f"{base_text}\n\n‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é{d} ",
                    parse_mode="HTML",
                )
                await asyncio.sleep(0.5)
            except Exception:
                return  # –ª—é–±–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ = –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é


# ------------------------------------------------------------------ #
# 3. –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ                                             #
# ------------------------------------------------------------------ #
async def send_success_message(
        bot: Bot,
        chat_id: int,
        message_id: int,
        text: str,
        task_ids: List[str],
        state: FSMContext,
        operation_info: str,
) -> None:
    valid_task_ids = [tid for tid in task_ids if tid]
    data = await state.get_data()
    messages_to_delete = data.get("messages_to_delete", []).copy()

    # –£–¥–∞–ª—è–µ–º message_id –∏–∑ messages_to_delete, —Ç–∞–∫ –∫–∞–∫ –æ–ø–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
    if message_id in messages_to_delete:
        messages_to_delete.remove(message_id)
        logger.debug(f"–£–¥–∞–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ messages_to_delete")

    await state.update_data(
        operation_message_text=operation_info,
        task_ids=valid_task_ids,
        messages_to_delete=messages_to_delete
    )
    try:
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=create_delete_operation_kb(valid_task_ids, confirm=False),
            parse_mode="HTML",
        )
    except Exception:
        await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=create_delete_operation_kb(valid_task_ids, confirm=False),
            parse_mode="HTML",
        )


# ------------------------------------------------------------------ #
# 4. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π                                         #
# ------------------------------------------------------------------ #
async def format_operation_message(
        data: dict,
        api_client: ApiClient,
        include_amount: bool = True,
) -> str:
    date = data.get("date", "")
    wallet_code = data.get("wallet", "")
    wallet_name = {
        "project": "–ü—Ä–æ–µ–∫—Ç",
        "borrow": "–í–∑—è—Ç—å –≤ –¥–æ–ª–≥",
        "repay": "–í–µ—Ä–Ω—É—Ç—å –¥–æ–ª–≥",
    }.get(wallet_code, wallet_code)

    sec_code = data.get("chapter_code", "")
    cat_code = data.get("category_code", "")
    sub_code = data.get("subcategory_code", "")
    amount = data.get("amount") if include_amount else None
    comment = data.get("comment", "")

    creditor = data.get("creditor", "")
    creditor_name = data.get("creditor_name", creditor)
    coefficient = data.get("coefficient", 1.0)

    # --- —á–∏—Ç–∞–µ–º —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–±–µ–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π ---
    section_name = category_name = subcategory_name = ""
    try:
        if sec_code:
            section_name = next(
                (s.name for s in await api_client.get_sections() if s.code == sec_code),
                "",
            )
        if cat_code:
            category_name = next(
                (
                    c.name
                    for c in await api_client.get_categories(sec_code)
                    if c.code == cat_code
                ),
                "",
            )
        if sub_code:
            subcategory_name = next(
                (
                    s.name
                    for s in await api_client.get_subcategories(sec_code, cat_code)
                    if s.code == sub_code
                ),
                "",
            )
        if creditor:
            creditor_name = next(
                (
                    c.name
                    for c in await api_client.get_creditors()
                    if c.code == creditor
                ),
                creditor,
            )
    except Exception as e:
        logger.warning(f"–ù–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {e}")

    lines: list[str] = []
    if date:
        lines.append(f"–î–∞—Ç–∞: üóìÔ∏è {html.code(date)}")
    if wallet_name:
        lines.append(f"–ö–æ—à–µ–ª—ë–∫: üí∏ {html.code(wallet_name)}")
    if section_name:
        lines.append(f"–†–∞–∑–¥–µ–ª: üìï {html.code(section_name)}")
    if category_name:
        lines.append(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: üè∑Ô∏è {html.code(category_name)}")
    if subcategory_name:
        lines.append(f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: üè∑Ô∏è {html.code(subcategory_name)}")
    if creditor_name and wallet_code in (
            "borrow",
            "repay",
            "–í–∑—è—Ç—å –≤ –¥–æ–ª–≥",
            "–í–µ—Ä–Ω—É—Ç—å –¥–æ–ª–≥",
    ):
        lines.append(f"–ö—Ä–µ–¥–∏—Ç–æ—Ä: üë§ {html.code(creditor_name)}")
    if coefficient != 1.0 and wallet_code in ("borrow", "–í–∑—è—Ç—å –≤ –¥–æ–ª–≥"):
        lines.append(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: üìä {html.code(coefficient)}")
    if amount is not None:
        lines.append(f"–°—É–º–º–∞: üí∞ {html.code(amount)} ‚ÇΩ")
    if comment:
        lines.append(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: üí¨ {html.code(comment)}")

    return "\n".join(lines)


async def format_income_message(data: dict, api_client: ApiClient) -> str:
    date = data.get("date", "")
    category_code = data.get("category_code", "")
    amount = data.get("amount", 0)
    comment = data.get("comment", "")

    category_name = ""
    try:
        if category_code:
            categories = await api_client.get_incomes()
            category_name = next((cat.name for cat in categories if cat.code == category_code), category_code)
        logger.debug(f"Retrieved category name: {category_name}")
    except Exception as e:
        logger.warning(f"Error retrieving category name: {e}")

    message_lines = []
    if date:
        message_lines.append(f"–î–∞—Ç–∞: üóìÔ∏è {html.code(date)}")
    if category_name:
        message_lines.append(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: üè∑Ô∏è {html.code(category_name)}")
    if amount:
        message_lines.append(f"–°—É–º–º–∞: üí∞ {html.code(amount)} ‚ÇΩ")
    if comment:
        message_lines.append(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: üí¨ {html.code(comment)}")

    return "\n".join(message_lines)


# ------------------------------------------------------------------ #
# 5. –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π                                              #
# ------------------------------------------------------------------ #
async def delete_tracked_messages(
        bot: Bot,
        state: FSMContext,
        chat_id: int,
        exclude_message_id: Optional[int] = None,
        exclude_confirmed: bool = True
) -> None:
    data = await state.get_data()
    messages_to_delete = data.get("messages_to_delete", []).copy()
    key_message_ids = [data.get(field) for field in set(KEY_MESSAGE_FIELDS.values()) if data.get(field)]
    confirmed_message_ids = [
        data.get("confirmation_message_id")
        for task_id in data.get("task_ids", [])
        if data.get("confirmation_message_id")
    ]

    if not messages_to_delete:
        logger.debug(f"–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id}")
        return

    logger.debug(f"–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π {messages_to_delete} –≤ —á–∞—Ç–µ {chat_id}, –∏—Å–∫–ª—é—á–∞—è {exclude_message_id}")
    updated_messages = messages_to_delete.copy()

    for msg_id in messages_to_delete:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–ª—é—á–µ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏—Å–∫–ª—é—á—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (
                msg_id
                and (not exclude_confirmed or msg_id not in confirmed_message_ids)
                and msg_id not in key_message_ids
                and msg_id != exclude_message_id
        ):
            if await delete_message(bot, chat_id, msg_id):
                updated_messages.remove(msg_id)
        else:
            updated_messages.remove(msg_id)

    await state.update_data(messages_to_delete=updated_messages)
    logger.info(f"–û—á–∏—â–µ–Ω —Å–ø–∏—Å–æ–∫ messages_to_delete –≤ —á–∞—Ç–µ {chat_id}, –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫: {updated_messages}")


async def delete_message(bot: Bot, chat_id: int, message_id: int) -> bool:
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
        logger.debug(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}")
        return True
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
        return False


async def delete_key_messages(
        bot: Bot,
        state: FSMContext,
        chat_id: int,
        exclude_message_id: Optional[int] = None
) -> None:
    data = await state.get_data()
    key_message_ids = [data.get(field) for field in set(KEY_MESSAGE_FIELDS.values()) if data.get(field)]

    if not key_message_ids:
        logger.debug(f"–ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id}")
        return

    logger.debug(f"–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π {key_message_ids} –≤ —á–∞—Ç–µ {chat_id}, –∏—Å–∫–ª—é—á–∞—è {exclude_message_id}")
    update_data = {
        field: None if data.get(field) != exclude_message_id else data.get(field)
        for field in set(KEY_MESSAGE_FIELDS.values())
    }
    update_data["messages_to_delete"] = data.get("messages_to_delete", [])

    for msg_id in key_message_ids:
        if msg_id != exclude_message_id:
            if await delete_message(bot, chat_id, msg_id):
                # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                for field in KEY_MESSAGE_FIELDS.values():
                    if data.get(field) == msg_id:
                        update_data[field] = None

    await state.update_data(**update_data)
    logger.info(f"–û—á–∏—â–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id}, –∏—Å–∫–ª—é—á–∞—è {exclude_message_id}")


# ------------------------------------------------------------------ #
# 6. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ç–∞–π–º–µ—Ä—É                      #
# ------------------------------------------------------------------ #
async def cancel_expired_message(
        bot: Bot,
        chat_id: int,
        message_id: int,
        state: FSMContext,
        timeout: int = 30
) -> None:
    try:
        await asyncio.sleep(timeout)
        data = await state.get_data()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞)
        if data.get("last_interaction_time", 0) + timeout <= asyncio.get_event_loop().time():
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="‚åõ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ",
                parse_mode="HTML",
                reply_markup=None
            )
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            agent_state = data.get("agent_state", {})
            if agent_state:
                agent_state["requests"] = []
                await state.update_data(agent_state=agent_state)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ —Ç–∞–π–º–µ—Ä—É")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–º–µ–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")


# ------------------------------------------------------------------ #
# 7. –¢—Ä–µ–∫–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π                                                #
# ------------------------------------------------------------------ #
def track_messages(func):
    @wraps(func)
    async def wrapper(event: Union[Message, CallbackQuery], state: FSMContext, bot: Bot, *args, **kwargs):
        if isinstance(event, Message):
            chat_id = event.chat.id
            user_id = event.from_user.id
            event_type = "Message"
            event_id = event.message_id
        elif isinstance(event, CallbackQuery):
            if not event.message:
                logger.warning(f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ CallbackQuery –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
                return await func(event, state, bot, *args, **kwargs)
            chat_id = event.message.chat.id
            user_id = event.from_user.id
            event_type = "CallbackQuery"
            event_id = event.message.message_id
        else:
            logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {type(event).__name__}")
            return await func(event, state, bot, *args, **kwargs)

        current_state = await state.get_state() or "AI:default"
        if "AI" in func.__module__ and not current_state.startswith("AI:"):
            current_state = f"AI:clarify:{(await state.get_data()).get('agent_state', {}).get('actions', [{}])[0].get('clarification_field', 'default')}"
            if any(out.get("state") == "Expense:confirm" for out in
                   (await state.get_data()).get("agent_state", {}).get("output", [])):
                current_state = "AI:confirm"

        logger.debug(
            f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {event_type} (id={event_id}) –≤ —á–∞—Ç–µ {chat_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ={current_state}")

        data = await state.get_data()
        messages_to_delete = data.get("messages_to_delete", []).copy()

        try:
            result = await func(event, state, bot, *args, **kwargs)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ {func.__name__}: {e}")
            raise

        key_field = KEY_MESSAGE_FIELDS.get(current_state)
        if isinstance(result, Message):
            if key_field:
                old_key_message_id = data.get(key_field)
                if old_key_message_id and old_key_message_id != result.message_id and old_key_message_id not in messages_to_delete:
                    messages_to_delete.append(old_key_message_id)
                    logger.debug(
                        f"–°—Ç–∞—Ä–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {old_key_message_id} ({key_field}) –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ messages_to_delete")
                await state.update_data({key_field: result.message_id, "messages_to_delete": messages_to_delete})
                logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {result.message_id} –≤ {key_field}")
            else:
                if result.message_id != event_id and result.message_id not in messages_to_delete:
                    messages_to_delete.append(result.message_id)
                    logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {result.message_id} –≤ messages_to_delete")
                    await state.update_data(messages_to_delete=messages_to_delete)
        elif result is None:
            logger.warning(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ {func.__name__} –≤–µ—Ä–Ω—É–ª None")

        if isinstance(event, CallbackQuery) and key_field:
            data = await state.get_data()
            current_key_message_id = data.get(key_field)
            if current_key_message_id == event.message.message_id and event.message.message_id not in messages_to_delete:
                logger.debug(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {event.message.message_id} —è–≤–ª—è–µ—Ç—Å—è –∫–ª—é—á–µ–≤—ã–º ({key_field})")
            elif event.message.message_id not in messages_to_delete and event.message.message_id != (
                    result.message_id if isinstance(result, Message) else None):
                messages_to_delete.append(event.message.message_id)
                logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {event.message.message_id} –≤ messages_to_delete")
                await state.update_data(messages_to_delete=messages_to_delete)

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        await state.update_data(last_interaction_time=asyncio.get_event_loop().time())

        return result

    return wrapper


# ------------------------------------------------------------------ #
# 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏                                         #
# ------------------------------------------------------------------ #
async def check_task_status(api_client: ApiClient, task_id: str, max_attempts: int = 10, delay: float = 2.0) -> bool:
    for attempt in range(max_attempts):
        try:
            status = await api_client.get_task_status(task_id)
            if status.get("status") == "completed":
                logger.info(f"Task {task_id} completed successfully")
                return True
            elif status.get("status") in ["failed", "error"]:
                logger.error(f"Task {task_id} failed: {status.get('error', 'Unknown error')}")
                return False
        except Exception as e:
            logger.warning(f"Error checking task {task_id} status: {e}")
        logger.debug(f"Task {task_id} still pending, attempt {attempt + 1}/{max_attempts}")
        await asyncio.sleep(delay)
    logger.warning(f"Task {task_id} timed out after {max_attempts} attempts")
    return False
